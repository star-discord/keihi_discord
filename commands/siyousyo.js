import { SlashCommandBuilder } from 'discord.js';

export const data = new SlashCommandBuilder()
  .setName('仕様書')
  .setDescription('経費申請BotとKPI報告機能の仕様書を表示します');

const specText = `
>>> **📄 経費申請 仕様書**

---

### 🧾 概要
このBotは、**Discord上で簡単に経費申請を行うためのツール**です。  
モーダルフォームを用いた申請と、スレッドでの記録・共有が特徴です。

---

### ✅ 主な機能

- \`/setti\` コマンドで案内メッセージ＋ボタンを送信
- 「経費申請する」ボタン → モーダルフォーム表示
- 入力完了後、指定スレッドに内容を投稿
- 申請者のユーザー名＋メンションを自動取得
- テキストチャンネルに、申請通知＋メッセージリンクを投稿

---

### 🔁 操作フロー

1. **管理者等が** \`/setti\` を実行
2. Botが案内メッセージとボタンを送信
3. ユーザーがボタンを押す → モーダルが表示
4. 「経費項目・金額・備考」を入力し送信
5. 指定スレッド（経費申請-YYYY-MM）に申請内容を投稿
6. テキストチャンネルに、**日時・名前・メンション・リンク**付きで通知

---

### 📌 補足仕様

- スレッド名は月ごとに「\`経費申請-YYYY-MM\`」で統一
- 同月に複数人が申請してもスレッドは共用
- Botが送信した案内メッセージは、同内容があれば削除して再投稿
- メンションは \`<@ユーザーID>\` 形式で常にリンク可能
- 備考欄は任意・長文対応

---

### 🛠 技術補足

- モーダルは Discord.js v14 の Modal API を使用
- Render 上で常時稼働（ポート監視付き）
- エラーハンドリング済（API失敗などに備える）

---

>>> **📄 KPI報告機能 仕様書**

---

### 🧾 概要
KPI報告機能は、**店舗別に目標人数を設定し、ユーザーが達成人数を報告できる仕組み**です。  
追加された店舗は管理され、報告時は選択メニューで店舗を選び、目標達成率を計算して報告します。

---

### ✅ 主な機能

- \`/kpi_設定\` コマンドで店舗の追加と目標設定用の案内を送信
- 店舗名はJSONファイル等で永続管理し、重複登録を防止
- KPI店舗追加ボタンで複数店舗の追加が可能
- KPI目標設定ボタンで店舗を選択し、日付と目標人数をモーダルで入力可能
- \`/kpi_設置\` コマンドで報告用モーダルを開き、店舗をプルダウン選択可能
- 達成人数を入力後、目標人数と比較し達成率を計算
- KPI報告は指定チャンネルにログとして投稿
- Slack連携通知（別途設定で実装）

---

### 🔁 操作フロー

1. 管理者が \`/kpi_設定\` を実行し、店舗追加・目標設定の案内を送信
2. ユーザーが店舗追加ボタンを押し、店舗名をモーダルで追加
3. ユーザーが目標設定ボタンを押し、店舗選択後に目標人数・日付を設定
4. ユーザーが \`/kpi_設置\` コマンドで報告モーダルを開く
5. 店舗プルダウンから店舗を選択し、達成人数と日付を入力して送信
6. Botが達成率を計算し、ログとしてDiscordチャットとSlackに送信

---

### 📌 補足仕様

- 店舗リストはJSONファイルに永続保存
- 店舗の追加は重複チェックあり
- 達成率は整数または小数点2位まで計算
- モーダルは Discord.js v14 の Modal API を使用
- エラーハンドリングを十分に実装

---

### 🛠 技術補足

- Discord.js v14 で開発
- ファイルIOは fs/promises を利用
- Slack Webhook URLは環境変数で管理
- Render上で常時稼働

---

🔧 開発・運用: **redstar hr**  
📧 お問い合わせ: redstar.hoshir@gmail.com
`;

export async function execute(interaction) {
  try {
    await interaction.reply({
      content: specText,
      flags: 64, // Ephemeral (非公開返信)
    });
  } catch (error) {
    console.error('仕様書コマンドエラー:', error);
    if (!interaction.replied) {
      await interaction.reply({
        content: 'エラーが発生しました。',
        flags: 64,
      });
    }
  }
}
