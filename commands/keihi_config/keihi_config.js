// keihi_config.js

const {
  SlashCommandBuilder,
  PermissionFlagsBits,
  RoleSelectMenuBuilder,
  ActionRowBuilder,
  ComponentType
} = require('discord.js');

const { setApproverRoles, setVisibleRoles } = require('../../utils/fileStorage.js');

const MESSAGES = require('../../constants/messages.js');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('ÁµåË≤ªÁî≥Ë´ãË®≠ÂÆö')
    .setDescription('ÊâøË™ç„ÉªË°®Á§∫„É≠„Éº„É´„ÇíË®≠ÂÆö„Åó„Åæ„Åô')
    .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),  // ÁÆ°ÁêÜËÄÖÊ®©Èôê„ÇíÂøÖË¶Å„Å®„Åô„Çã

  async execute(interaction) {
    try {
      const approverMenu = new RoleSelectMenuBuilder()
        .setCustomId('select_approver_roles')  // ÊâøË™ç„É≠„Éº„É´ÈÅ∏Êäû„É°„Éã„É•„Éº„ÅÆ„Ç´„Çπ„Çø„É†ID
        .setPlaceholder('‚úÖ ÊâøË™ç„É≠„Éº„É´„ÇíÈÅ∏ÊäûÔºàÂøÖÈ†àÔºâ')
        .setMinValues(1)
        .setMaxValues(5);

      const visibleMenu = new RoleSelectMenuBuilder()
        .setCustomId('select_visible_roles')  // Ë°®Á§∫„É≠„Éº„É´ÈÅ∏Êäû„É°„Éã„É•„Éº„ÅÆ„Ç´„Çπ„Çø„É†ID
        .setPlaceholder('üëÅ Ë°®Á§∫„É≠„Éº„É´„ÇíÈÅ∏ÊäûÔºà‰ªªÊÑèÔºâ')
        .setMinValues(0)
        .setMaxValues(5);

      const row1 = new ActionRowBuilder().addComponents(approverMenu);
      const row2 = new ActionRowBuilder().addComponents(visibleMenu);

      await interaction.reply({
        content: MESSAGES.ROLE.PROMPT,  // „É°„ÉÉ„Çª„Éº„Ç∏„ÅÆ„Éó„É≠„É≥„Éó„Éà
        components: [row1, row2],  // „Éú„Çø„É≥„Å™„Å©„ÅÆ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíË°®Á§∫
        ephemeral: true
      });

      // „Åì„Åì„Åß„ÅÆ interaction „ÅØ„ÄÅ„Éú„Çø„É≥„ÇÑÈÅ∏Êäû„É°„Éã„É•„Éº„ÅÆÂá¶ÁêÜ
      const collector = interaction.channel.createMessageComponentCollector({
        componentType: ComponentType.RoleSelect,  // RoleSelect „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíÂà©Áî®
        time: 60_000,  // 1ÂàÜÈñì
        filter: i => i.user.id === interaction.user.id  // „Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥„Åó„Åü„É¶„Éº„Ç∂„Éº„Å´ÈôêÂÆö
      });

      const selected = {};  // ÈÅ∏Êäû„Åï„Çå„Åü„É≠„Éº„É´„Çí‰øùÊåÅ

      collector.on('collect', async i => {
        if (i.customId === 'select_approver_roles') {
          selected.approverRoles = i.values;
          await i.reply({ content: '‚úÖ ÊâøË™ç„É≠„Éº„É´„ÇíÂèó„ÅëÂèñ„Çä„Åæ„Åó„Åü„ÄÇ', ephemeral: true });
        }

        if (i.customId === 'select_visible_roles') {
          selected.visibleRoles = i.values;
          await i.reply({ content: 'üëÅ Ë°®Á§∫„É≠„Éº„É´„ÇíÂèó„ÅëÂèñ„Çä„Åæ„Åó„Åü„ÄÇ', ephemeral: true });
        }

        // ‰∏°ÊñπÊèÉ„Å£„Åü„Çâ„Éá„Éº„Çø„Çí‰øùÂ≠ò„Åó„Å¶ÂÆå‰∫Ü
        if (selected.approverRoles && selected.visibleRoles !== undefined) {
          setApproverRoles(interaction.guildId, selected.approverRoles);
          setVisibleRoles(interaction.guildId, selected.visibleRoles);

          const roleMentions = selected.approverRoles.map(id => `<@&${id}>`).join(', ');
          const visibleMentions = selected.visibleRoles.length > 0
            ? selected.visibleRoles.map(id => `<@&${id}>`).join(', ')
            : 'Ôºà„Å™„ÅóÔºâ';

          await interaction.editReply({
            content: `${MESSAGES.ROLE.SET(roleMentions)}\nüëÅ Ë°®Á§∫„É≠„Éº„É´: ${visibleMentions}`,
            components: []  // „Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàÂâäÈô§
          });

          collector.stop();
        }
      });

      collector.once('end', collected => {
        if (!selected.approverRoles) {
          interaction.editReply({
            content: MESSAGES.ROLE.TIMEOUT,
            components: []
          }).catch(console.error);
        }
      });

    } catch (err) {
      console.error('‚ùå „É≠„Éº„É´Ë®≠ÂÆö„Ç®„É©„Éº:', err);
      await interaction.reply({
        content: MESSAGES.GENERAL.ERROR,
        ephemeral: true
      });
    }
  }
};
